version: '3.9'

services:
  #consumer:
  #  build:
  #    dockerfile: ./Dockerfile.consumer
  #    context: .
  #  environment:
  #    KAFKA_BROKERS: kafka:9092
  #    DB_CONN_STR: postgres://postgres:s3cr3t@postgresql:5432/postgres
  #  depends_on:
  #    - kafka
  #    - postgres

  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      KAFKA_BROKERS: kafka:9092
      DB_CONNECTION_STRING: postgres://postgres:postgres@postgres:5432/postgres
      REDIS_HOST: redis:6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    #    env_file:
    #      - .env
    depends_on:
      - kafka
      - postgres
      - redis
    ports:
      - "8080:8080"
    networks:
      - backend-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend-network

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8085:8085"
      - "8086:8080"
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - backend-network

  postgres:
    image: postgres:15.1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD", "pg_isready" ,"-U", "postgres", "-h", "127.0.0.1", "-p", "5432" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - ./resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    networks:
      - backend-network

  redis:
    image: redis:6.2.6-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data
    networks:
      - backend-network

volumes:
  cache:
    driver: local

networks:
  backend-network:
    driver: bridge